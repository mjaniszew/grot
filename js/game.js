// Generated by CoffeeScript 1.7.1
(function() {
  var Board, Field, FieldWidget, Game, Level, Renderer, TWEEN_DURATION, game, randomChoice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TWEEN_DURATION = 0.5;

  randomChoice = function(values) {
    return values[Math.floor(Math.random() * values.length)];
  };

  FieldWidget = (function() {
    FieldWidget.prototype.group = null;

    FieldWidget.prototype.circle = null;

    FieldWidget.prototype.label = null;

    FieldWidget.prototype.field = null;

    FieldWidget.prototype.callback = null;

    FieldWidget.prototype.colors = {
      gray: '#95a5a6',
      blue: '#2980b9',
      green: '#27ae60',
      yellow: '#e67e22',
      red: '#e74c3c'
    };

    FieldWidget.prototype.arrows = {
      left: String.fromCharCode(8592),
      right: String.fromCharCode(8594),
      up: String.fromCharCode(8593),
      down: String.fromCharCode(8595),
      none: ' '
    };

    function FieldWidget(field) {
      this.field = field;
      this.group = new Kinetic.Group;
      this.circle = new Kinetic.Circle({
        x: 0,
        y: 0,
        radius: 45,
        fill: this.colors[this.field.value]
      });
      this.label = new Kinetic.Text({
        x: 0,
        y: 0,
        text: this.arrows[this.field.direction],
        align: 'center',
        fontSize: 55,
        fontFamily: 'Calibri',
        fontStyle: 'bold',
        fill: '#333333'
      });
      this.centerLabel();
      this.group.add(this.circle);
      this.group.add(this.label);
    }

    FieldWidget.prototype.centerLabel = function() {
      this.label.offsetX(this.label.width() / 2);
      return this.label.offsetY(this.label.height() / 2);
    };

    FieldWidget.prototype.move = function(x, y) {
      var relativeX, relativeY;
      relativeX = x - this.group.x();
      relativeY = y - this.group.y();
      return this.group.move({
        x: relativeX,
        y: relativeY
      });
    };

    FieldWidget.prototype.scale = function(scale) {
      return this.group.scale({
        x: scale,
        y: scale
      });
    };

    FieldWidget.prototype.reset = function() {
      this.circle.fill(this.colors[this.field.value]);
      this.label.setText(this.arrows[this.field.direction]);
      return this.centerLabel();
    };

    FieldWidget.prototype.setupCallback = function(callback) {
      var widget;
      this.callback = callback;
      widget = this;
      return this.group.on('mousedown touchstart', function(event) {
        return widget.callback(widget.field, event);
      });
    };

    return FieldWidget;

  })();

  Field = (function() {
    Field.prototype.x = null;

    Field.prototype.y = null;

    Field.prototype.id = null;

    Field.prototype.value = null;

    Field.prototype.direction = null;

    Field.prototype.widget = null;

    Field.prototype.board = null;

    Field.prototype.points = {
      gray: 0,
      blue: 1,
      green: 2,
      yellow: 3,
      red: 4
    };

    function Field(board, x, y) {
      this.board = board;
      this.x = x;
      this.y = y;
      this.id = "" + this.x + "-" + this.y;
      this.resetRandoms();
      this.widget = new FieldWidget(this);
    }

    Field.prototype.resetRandoms = function() {
      var k;
      this.value = randomChoice((function() {
        var _results;
        _results = [];
        for (k in this.points) {
          _results.push(k);
        }
        return _results;
      }).call(this));
      this.direction = randomChoice(['left', 'right', 'up', 'down']);
      if (this.widget != null) {
        return this.widget.reset();
      }
    };

    Field.prototype.getPoints = function() {
      return this.points[this.value];
    };

    Field.prototype.updatePosition = function(x, y) {
      this.x = x;
      this.y = y;
      return this.id = "" + this.x + "-" + this.y;
    };

    return Field;

  })();

  Board = (function() {
    Board.prototype.size = 0;

    Board.prototype.fields = [];

    function Board(size) {
      this.size = size != null ? size : 9;
      this.createBoard(this.size);
    }

    Board.prototype.createBoard = function() {
      var x, y, _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = this.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.fields.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(new Field(this, x, y));
          }
          return _results1;
        }).call(this)));
      }
      return _results;
    };

    Board.prototype.getNextField = function(field, lastDirection) {
      var direction, nextField;
      if (lastDirection == null) {
        lastDirection = null;
      }
      direction = lastDirection ? lastDirection : field.direction;
      if (direction === 'left') {
        if (field.x === 0) {
          return [field, true];
        }
        nextField = this.fields[field.x - 1][field.y];
      } else if (direction === 'right') {
        if (field.x === (this.size - 1)) {
          return [field, true];
        }
        nextField = this.fields[field.x + 1][field.y];
      } else if (direction === 'up') {
        if (field.y === 0) {
          return [field, true];
        }
        nextField = this.fields[field.x][field.y - 1];
      } else if (direction === 'down') {
        if (field.y === (this.size - 1)) {
          return [field, true];
        }
        nextField = this.fields[field.x][field.y + 1];
      }
      if (nextField.direction === 'none') {
        return this.getNextField(nextField, direction);
      }
      return [nextField, false];
    };

    Board.prototype.lowerField = function(field) {
      var lastMove, newX, newY, nextField, oldX, oldY, _ref;
      oldX = field.x;
      oldY = field.y;
      _ref = this.getNextField(field, 'down'), nextField = _ref[0], lastMove = _ref[1];
      newX = nextField.x;
      newY = nextField.y;
      if (!lastMove) {
        newY = nextField.y - 1;
      }
      if (newY === oldY) {
        return [];
      }
      this.fields[oldX][oldY] = this.fields[newX][newY];
      this.fields[oldX][oldY].updatePosition(oldX, oldY);
      this.fields[newX][newY] = field;
      this.fields[newX][newY].updatePosition(newX, newY);
      return [newX, newY];
    };

    return Board;

  })();

  Renderer = (function() {
    Renderer.prototype.board = null;

    Renderer.prototype.stage = null;

    Renderer.prototype.layer = null;

    function Renderer(board) {
      var x, y, _i, _j, _ref, _ref1;
      this.board = board;
      this.startMove = __bind(this.startMove, this);
      this.cavnasSize = Math.min(window.innerHeight, window.innerWidth) - 20;
      this.stage = new Kinetic.Stage({
        container: 'wrap',
        width: this.cavnasSize,
        height: this.cavnasSize
      });
      this.refreshWidgets();
      this.layer = new Kinetic.Layer;
      for (x = _i = 0, _ref = this.board.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.board.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.layer.add(this.board.fields[x][y].widget.group);
        }
      }
      this.stage.add(this.layer);
    }

    Renderer.prototype.resizeCanvas = function() {
      this.cavnasSize = Math.min(window.innerHeight, window.innerWidth) - 20;
      this.stage.setHeight(this.cavnasSize);
      return this.stage.setWidth(this.cavnasSize);
    };

    Renderer.prototype.refresh = function() {
      this.resizeCanvas();
      return this.refreshWidgets();
    };

    Renderer.prototype.getFieldCenter = function(x, y) {
      var centerX, centerY, unit;
      unit = Math.round(this.cavnasSize / (this.board.size * 2));
      centerX = 2 * unit + x * 2 * unit;
      centerY = 2 * unit + y * 2 * unit;
      return [centerX - unit, centerY - unit];
    };

    Renderer.prototype.refreshWidgets = function() {
      var centerX, centerY, unit, widget, x, y, _i, _ref, _results;
      unit = Math.round(this.cavnasSize / (this.board.size * 2));
      _results = [];
      for (x = _i = 0, _ref = this.board.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _ref2, _results1;
          _results1 = [];
          for (y = _j = 0, _ref1 = this.board.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
            _ref2 = this.getFieldCenter(x, y), centerX = _ref2[0], centerY = _ref2[1];
            widget = this.board.fields[x][y].widget;
            widget.scale(unit / 50);
            widget.move(centerX, centerY);
            if (widget.callback == null) {
              _results1.push(widget.setupCallback(this.startMove));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Renderer.prototype.listening = function(state) {
      var x, y, _i, _j, _ref, _ref1;
      for (x = _i = 0, _ref = this.board.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.board.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          this.board.fields[x][y].widget.group.listening(state);
        }
      }
      return this.layer.drawHit();
    };

    Renderer.prototype.startMove = function(field, event) {
      this.listening(false);
      this.movePoints = 0;
      return this.moveToNextField(field);
    };

    Renderer.prototype.moveToNextField = function(startField) {
      var centerX, centerY, lastMove, nextField, tween, _ref, _ref1;
      _ref = this.board.getNextField(startField), nextField = _ref[0], lastMove = _ref[1];
      _ref1 = this.getFieldCenter(nextField.x, nextField.y), centerX = _ref1[0], centerY = _ref1[1];
      startField.direction = 'none';
      this.movePoints += startField.getPoints();
      tween = new Kinetic.Tween({
        node: startField.widget.group,
        duration: TWEEN_DURATION,
        x: centerX,
        y: centerY,
        opacity: 0,
        onFinish: (function(_this) {
          return function() {
            if (lastMove) {
              return _this.lowerFields();
            } else {
              return _this.moveToNextField(nextField);
            }
          };
        })(this)
      });
      return tween.play();
    };

    Renderer.prototype.lowerFields = function() {
      var centerX, centerY, field, newX, newY, result, tween, tweens, x, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _results;
      tweens = [];
      for (y = _i = _ref = this.board.size - 2; _ref <= 0 ? _i <= 0 : _i >= 0; y = _ref <= 0 ? ++_i : --_i) {
        for (x = _j = 0, _ref1 = this.board.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          field = this.board.fields[x][y];
          if (field.direction !== 'none') {
            result = this.board.lowerField(field);
            if (result.length === 2) {
              newX = result[0], newY = result[1];
              _ref2 = this.getFieldCenter(newX, newY), centerX = _ref2[0], centerY = _ref2[1];
              tweens.push(new Kinetic.Tween({
                node: field.widget.group,
                easing: Kinetic.Easings.BounceEaseOut,
                duration: TWEEN_DURATION,
                x: centerX,
                y: centerY
              }));
            }
          }
        }
      }
      if (tweens.length > 0) {
        tweens[0].onFinish = (function(_this) {
          return function() {
            return _this.fillEmptyFields();
          };
        })(this);
        _results = [];
        for (_k = 0, _len = tweens.length; _k < _len; _k++) {
          tween = tweens[_k];
          _results.push(tween.play());
        }
        return _results;
      } else {
        return this.fillEmptyFields();
      }
    };

    Renderer.prototype.fillEmptyFields = function() {
      var field, tween, tweens, x, y, _i, _j, _k, _len, _ref, _ref1, _results;
      tweens = [];
      for (x = _i = 0, _ref = this.board.size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        for (y = _j = 0, _ref1 = this.board.size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          field = this.board.fields[x][y];
          if (field.direction === 'none') {
            field.resetRandoms();
            tweens.push(new Kinetic.Tween({
              node: field.widget.group,
              opacity: 1,
              duration: TWEEN_DURATION
            }));
          }
        }
      }
      this.refreshWidgets();
      if (tweens.length > 0) {
        tweens[0].onFinish = (function(_this) {
          return function() {
            return _this.finishMove();
          };
        })(this);
        _results = [];
        for (_k = 0, _len = tweens.length; _k < _len; _k++) {
          tween = tweens[_k];
          _results.push(tween.play());
        }
        return _results;
      } else {
        return this.finishMove();
      }
    };

    Renderer.prototype.finishMove = function() {
      return this.listening(true);
    };

    return Renderer;

  })();

  Level = (function() {
    Level.prototype.board = null;

    function Level(boardSize) {
      if (boardSize == null) {
        boardSize = 9;
      }
      this.board = new Board(boardSize);
      this.renderer = new Renderer(this.board);
    }

    return Level;

  })();

  Game = (function() {
    Game.prototype.levels_params = [5, 6, 7, 8];

    Game.prototype.level = null;

    Game.prototype.level_id = null;

    function Game() {
      var boardSize;
      this.level_id = 0;
      boardSize = this.levels_params[this.level_id];
      this.level = new Level(boardSize);
    }

    return Game;

  })();

  window.game = game = new Game();

  window.onresize = function(event) {
    return game.level.renderer.refresh(event);
  };

}).call(this);
